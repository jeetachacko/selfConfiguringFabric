from bs4 import BeautifulSoup
import subprocess
import wandb

# use this for HTML report generated by caliper
def parse_caliper_report(filename="fabric-test-network-extended/caliper/report.html"):
    with open(filename) as f:
        soup = BeautifulSoup(f, "html.parser")
    table = soup.find(id="benchmarksummary").table

    headers = [header.text for header in table.find_all("th")]
    contents = [
        {headers[i]: cell.text for i, cell in enumerate(row.find_all("td"))}
        for row in table.find_all("tr")
    ]
    # will return dict with table contents
    # TODO adjust this if necessary for your use case
    return contents[2:]  # skip header 0 and initial result


# use this for LOG file generated by caliper
def parse_caliper_log(keywords):
    states = []
    for key in keywords:
        command = f'cat /home/ubuntu/hll3_opennebula/caliper/caliper-logs.txt | grep {key} | tail -1'
        update_process = subprocess.Popen(
            [command],
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.DEVNULL,
        )
        
        try:
            value, err = update_process.communicate()
            value = str(value)
            values = value.split('|')
            print(f"LOG EXTRACTED VALUE {value}")
            duration = (float(values[2].strip()) + float(values[3].strip())) / float(values[8].strip())
            print(f"LOG DURATION {duration}")
            successthroughput = float(values[2].strip()) / duration
            print(f"LOG SUCCESS THROUGHPUT {successthroughput}")
            wandb.log({"success": {'success': float(values[2].strip())}})
            wandb.log({"fail": {'fail': float(values[3].strip())}})
            wandb.log({"send_rate": {'send_rate': float(values[4].strip())}})
            wandb.log({"avg_latency": {'avg_latency': float(values[7].strip())}})
            wandb.log({"throughput": {'throughput': float(values[8].strip())}})
            wandb.log({"successthroughput": {'successthroughput': successthroughput}})

            states.append({
                'name': values[1],
                'success': float(values[2].strip()),
                'fail': float(values[3].strip()),
                'send_rate': float(values[4].strip()),
                'max_latency': float(values[5].strip()),
                'min_latency': float(values[6].strip()),
                'avg_latency': float(values[7].strip()),
                'throughput': float(values[8].strip()),
                'successthroughput': float(successthroughput),
            })
        except Exception as e:
            print(f"log parsing error {e}")
            states.append({
                'name': key,
                'success': 0,
                'fail': 0,
                'send_rate': 0,
                'max_latency': 0,
                'min_latency': 0,
                'avg_latency': 0,
                'throughput': 0,
            })

    return states